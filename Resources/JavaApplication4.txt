package g5;





import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.Scanner;
import java.util.StringTokenizer;







public class JavaApplication4 {
private simpleindexsec[] sI = new simpleindexsec[100200];
	
    private String cvv,holdername,cardtypefullname,cardnumber,cardpin,creditlimit;
	int reccount = 0;

public void getData1(){
    		@SuppressWarnings("resource")
		Scanner scanner = new Scanner(System.in);
    	System.out.println("Enter the cvv: ");
    	cvv = scanner.next();
    	System.out.println("Enter the primary key: ");
   		holdername = scanner.next();
		
		
		System.out.println("Enter the cardtypefullname: ");
		cardtypefullname = scanner.next();
		System.out.println("Enter the cardnumber: ");
		cardnumber = scanner.next();
		System.out.println("Enter the cardpin: ");
		cardpin = scanner.next();
		System.out.println("Enter the creditlimit: ");
		creditlimit = scanner.next();
		
}
public void add1(){
        String data=cvv +","+ holdername +","+ cardtypefullname +","+ cardnumber +","+ cardpin +","+","+creditlimit+","+"/n";

 try{			
			RandomAccessFile recordfile = new RandomAccessFile ("C:\\Users\\lenovo\\Desktop\\credit1.csv","rw");
			recordfile.seek(recordfile.length());
			long pos = recordfile.getFilePointer();
			recordfile.writeBytes(data+"\n");
			recordfile.close();
			
			RandomAccessFile indexfile = new RandomAccessFile ("C:\\Users\\lenovo\\Desktop\\csec1.txt","rw");
			indexfile.seek(indexfile.length());
			indexfile.writeBytes(holdername+","+pos+"\n");
			indexfile.close();
		}
		catch(IOException e){
			System.out.println(e);
		}
		
 
}                     
    public void priIndex(){

		String line,seckey = null,pos = null;
		int count = 0;
		int sIIndex = 0;
		reccount=0;
		RandomAccessFile indexfile;
		try {
			indexfile = new RandomAccessFile("C:\\Users\\lenovo\\Desktop\\csec1.txt","rw");

			try {
				
				while((line = indexfile.readLine())!= null){
                                     if(line.contains("*")) {
	                		continue;
	                	}
					count = 0;
                                                 
                                       
	          
					
					StringTokenizer st = new StringTokenizer(line,",");
					while (st.hasMoreTokens()){
					 count+=1;
					 if(count==1)
				    seckey = st.nextToken();
					 pos = st.nextToken();
                                         
				    }
					sI[sIIndex] = new simpleindexsec();
					sI[sIIndex].setRecPos(pos);
					sI[sIIndex].setholdername(seckey);
					reccount++;
					sIIndex++;
                                        if(sIIndex==100200)
                                        {
                                            break;
                                        }
                                }
			} catch (IOException e) {
				
				e.printStackTrace();
				return;
			}
		} catch (FileNotFoundException e) {
			
			e.printStackTrace();
			return;
		} 
		
		System.out.println("total records" + reccount);
		if (reccount==1) { return;}
		sortIndex();
	}
	
	
	public void sortIndex() {
		simpleindexsec temp = new simpleindexsec();
		
		for(int i=0; i<reccount; i++)
		    {	
				for(int j=i+1; j<reccount; j++) {
					if(sI[i].getholdername().compareTo(sI[j].getholdername())  > 0)
		            {
		                temp.setholdername(sI[i].getholdername()); 
				        temp.setRecPos(sI[i].getRecPos());
				
			        	sI[i].setholdername(sI[j].getholdername());
			        	sI[i].setRecPos(sI[j].getRecPos());
				
			        	sI[j].setholdername(temp.getholdername());
			        	sI[j].setRecPos(temp.getRecPos());
		            }
				}
					
			}	
		
	}
        @SuppressWarnings("resource")
		public void searchsec(){
        	 System.out.println("Enter the holdername to search: ");
             Scanner scanner = new Scanner(System.in);
             String holdername = scanner.next();
             
             
             int oripos = binarySearch(sI, 0, reccount-1, holdername);
             
             if (oripos == -1) {
                 System.out.println("Record not found in the record file");
                 return ;
             }
             
             int pos = oripos;
             
             do {
                 readFile(pos);
                 pos--;
                 if (pos < 0) { break;}
             }while(sI[pos].getholdername().compareTo(holdername)==0);
             
             pos = oripos + 1 ;
             if(pos > reccount-1)
            	 return;
             while(sI[pos].getholdername().compareTo(holdername)==0) {
                 readFile(pos);
                 pos++;
             }
        }
 public void readFile(int pos) {
            
            RandomAccessFile recordfile;
            try {
                recordfile = new RandomAccessFile ("C:\\Users\\lenovo\\Desktop\\credit1.csv","rw");
                try {
                    recordfile.seek(Long.parseLong(sI[pos].getRecPos()));
                    String record = recordfile.readLine();
                    StringTokenizer st = new StringTokenizer(record,",");
                    
                    int count = 0;
                       
                    while (st.hasMoreTokens()){
                             count += 1;
                               if(count==1){
                            	 String tmp_cvv = st.nextToken();
                                System.out.println("cvv: "+tmp_cvv);
                                this.cvv = tmp_cvv;
                                  
                            	String tmp_holdername= st.nextToken();
                                System.out.println("prikey: "+tmp_holdername);
                                this.holdername = tmp_holdername;
                                   
                               
                               
                                String tmp_cardtypefullname = st.nextToken();
                                System.out.println("cardtypefullname: "+tmp_cardtypefullname);
                                this.cardtypefullname = tmp_cardtypefullname;
                               
                                 String tmp_cardnumber = st.nextToken();
                                 System.out.println("cardnumber: "+tmp_cardnumber);
                                 this.cardnumber = tmp_cardnumber;
                               
                                 String tmp_cardpin = st.nextToken();
                                 System.out.println("cardpin: "+tmp_cardpin);
                                 this.cardpin = tmp_cardpin;
                              
                                 String tmp_creditlimit = st.nextToken();
                                 System.out.println("creditlimit: "+tmp_creditlimit);
                                 this.creditlimit = tmp_creditlimit;
                                   System.out.println();
                                   
                                 
                                     System.out.println();
                                     
                               }
                               else
                                   break;
                       }
                    
                    recordfile.close();
                } 
                    catch (NumberFormatException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                } 
                catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
                
                
                }
                                        
                catch (FileNotFoundException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
 }

        int binarySearch(simpleindexsec s[], int l, int r, String holdername) {
    	
    	int mid;
    	while (l<=r) {
            
    		mid = (l+r)/2;
    		if(s[mid].getholdername().compareTo(holdername)==0) {return mid;}
    		if(s[mid].getholdername().compareTo(holdername)<0) l = mid + 1;
    		if(s[mid].getholdername().compareTo(holdername)>0) r = mid - 1;
    	}
    	return -1;
    }

  public  void indexing1() 
  {
         try{
        RandomAccessFile hey=new RandomAccessFile("C:\\Users\\lenovo\\Desktop\\credit1.csv","rw");
  
    			

        RandomAccessFile indexfile=new RandomAccessFile("C:\\Users\\lenovo\\Desktop\\csec1.txt","rw");
        String line;
 long       pos=hey.getFilePointer();
        while((line = hey.readLine())!=null)
        {
            if(line.contains("*")) {
	                		continue;
	                	}

            String[] columns=line.split(",");
            //indexfile.seek(indexfile.length());

   

//  System.out.println(columns[0]+","+pos+"\n");
            indexfile.writeBytes(columns[1]+","+pos+"\n");
             pos=hey.getFilePointer();
       } indexfile.close();
              hey.close();
                
        
         
       
         }
    
    catch(IOException e)
    {
        System.out.println(e);
    }
  }

  
  
  public void delete() {
		loadIndex();
	 
		System.out.println("Enter the holdername name to delete: ");
		Scanner scanner = new Scanner(System.in);
		String name = scanner.next();
		String ans = "n";
		int pos;
		
		int oripos = binarySearch(sI, 0, reccount-1, name);
		
		if (oripos == -1) {
			System.out.println("Record not found in the record file");
			return ;
		}
		
		pos = oripos;
		
		do {
			readFile(pos);
			
			System.out.println("Do You Want To delete This Record ?(y/n) ");
			ans = scanner.next();
			
			if (ans.compareTo("y")==0) {
				markDelete(pos, name);
			}
			pos--;
			if (pos < 0) { break;}
		}while(sI[pos].getholdername().compareTo(name)==0);
			
		
		pos = oripos + 1 ;
		
		if (pos > reccount-1) { return;}
		
		while(sI[pos].getholdername().compareTo(name)==0){
			readFile(pos);
			
			System.out.println("Do You Want To delete This Record ?(y/n) ");
			ans = scanner.next();
			
			if (ans.compareTo("y")==0) {
				markDelete(pos, name);
			}
			pos++;
			if (pos > reccount-1) { break;}
		}
}



public void markDelete(int pos, String name) {
	try {
		RandomAccessFile recordfilee = new RandomAccessFile ("C:\\Users\\lenovo\\Desktop\\credit1.csv","rw");
		RandomAccessFile indexfilee = new RandomAccessFile ("C:\\Users\\lenovo\\Desktop\\csec1.txt","rw");
	
			recordfilee.seek(Long.parseLong(sI[pos].getRecPos()));
			recordfilee.writeBytes("*");
			System.out.println("Done");
			recordfilee.close();
			String line;
			String indexName;
			long indexPos = 0;
			long delPosi;
			//delPosi = indexfilee.getFilePointer();
			while((line = indexfilee.readLine())!=null) {
				if(line.contains("*"))
					continue;
				StringTokenizer st = new StringTokenizer(line,",");
				delPosi = indexfilee.getFilePointer();
				delPosi = delPosi - (line.length()+2);
				
				//System.out.println("Delposi: " + delPosi);
				
				while(st.hasMoreTokens()) {
					indexName=st.nextToken();
					indexPos= Long.parseLong(st.nextToken());
					//System.out.println("indexPos: " + indexPos);
					//System.out.println("getrecpos: " + Long.parseLong(sI[pos].getRecPos()));
					if(indexName.equals(name) && indexPos == Long.parseLong(sI[pos].getRecPos()) ) {
						indexfilee.seek(delPosi);
						indexfilee.writeBytes("*");
						indexfilee.close();
						System.out.println("Deleted");
						loadIndex();
						return;
					}
				}
			}
			}
		
      catch (Exception e) {
      	e.printStackTrace();
      }
}

	
	
	
	
@SuppressWarnings("resource")
public void loadIndex(){
	
	String line,name = null,pos = null;
	int count = 0;
	int sIIndex = 0;
	reccount=0;
	RandomAccessFile indexfile;
	try {
		indexfile = new RandomAccessFile("C:\\Users\\lenovo\\Desktop\\csec1.txt", "rw");
		try {
			
			while((line = indexfile.readLine())!= null){
				if(line.contains("*"))
					continue;
				count = 0;
				
				StringTokenizer st = new StringTokenizer(line,",");
				while (st.hasMoreTokens()){
				 count += 1;
				 if(count==1)
			     name = st.nextToken();
				 pos = st.nextToken();
			    }
				sI[sIIndex] = new simpleindexsec();
				sI[sIIndex].setRecPos(pos);
				sI[sIIndex].setholdername(name);
				reccount++;
				sIIndex++;
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return;
		}
	} catch (FileNotFoundException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
		return;
	} //true tells to append data.
	
	System.out.println("total records" + reccount);
	if (reccount==1) { return;}
	sortIndex();
}
}